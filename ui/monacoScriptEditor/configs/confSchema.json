{
  "id": "editor",
  "order": 5,
  "type": "object",
  "title": "Editor",
  "overridable": true,
  "properties": {
    "editor.fontFamily": {
      "type": "string",
      "default": "Consolas, 'Courier New', monospace",
      "description": "Controls the font family."
    },
    "editor.fontWeight": {
      "type": "string",
      "enum": [
        "normal",
        "bold",
        "100",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "900"
      ],
      "default": "normal",
      "description": "Controls the font weight."
    },
    "editor.fontSize": {
      "type": "number",
      "default": 14,
      "description": "Controls the font size in pixels."
    },
    "editor.lineHeight": {
      "type": "number",
      "default": 0,
      "description": "Controls the line height. Use 0 to compute the lineHeight from the fontSize."
    },
    "editor.letterSpacing": {
      "type": "number",
      "default": 0,
      "description": "Controls the letter spacing in pixels."
    },
    "editor.lineNumbers": {
      "type": "string",
      "enum": [
        "off",
        "on",
        "relative"
      ],
      "default": "on",
      "description": "Controls the display of line numbers. Possible values are 'on', 'off', and 'relative'. 'relative' shows the line count from the current cursor position."
    },
    "editor.rulers": {
      "type": "array",
      "items": {
        "type": "number"
      },
      "default": [],
      "description": "Columns at which to show vertical rulers"
    },
    "editor.wordSeparators": {
      "type": "string",
      "default": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
      "description": "Characters that will be used as word separators when doing word related navigations or operations"
    },
    "editor.tabSize": {
      "type": "number",
      "default": 4,
      "minimum": 1,
      "description": "The number of spaces a tab is equal to. This setting is overriden based on the file contents when `editor.detectIndentation` is on.",
      "errorMessage": "Expected 'number'. Note that the value \"auto\" has been replaced by the `editor.detectIndentation` setting."
    },
    "editor.insertSpaces": {
      "type": "boolean",
      "default": true,
      "description": "Insert spaces when pressing Tab. This setting is overriden based on the file contents when `editor.detectIndentation` is on.",
      "errorMessage": "Expected 'boolean'. Note that the value \"auto\" has been replaced by the `editor.detectIndentation` setting."
    },
    "editor.detectIndentation": {
      "type": "boolean",
      "default": true,
      "description": "When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents."
    },
    "editor.roundedSelection": {
      "type": "boolean",
      "default": true,
      "description": "Controls if selections have rounded corners"
    },
    "editor.scrollBeyondLastLine": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the editor will scroll beyond the last line"
    },
    "editor.minimap.enabled": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the minimap is shown"
    },
    "editor.minimap.renderCharacters": {
      "type": "boolean",
      "default": true,
      "description": "Render the actual characters on a line (as opposed to color blocks)"
    },
    "editor.minimap.maxColumn": {
      "type": "number",
      "default": 120,
      "description": "Limit the width of the minimap to render at most a certain number of columns"
    },
    "editor.find.seedSearchStringFromSelection": {
      "type": "boolean",
      "default": true,
      "description": "Controls if we seed the search string in Find Widget from editor selection"
    },
    "editor.find.autoFindInSelection": {
      "type": "boolean",
      "default": false,
      "description": "Controls if Find in Selection flag is turned on when multiple characters or lines of text are selected in the editor"
    },
    "editor.wordWrap": {
      "type": "string",
      "enum": [
        "off",
        "on",
        "wordWrapColumn",
        "bounded"
      ],
      "enumDescriptions": [
        "Lines will never wrap.",
        "Lines will wrap at the viewport width.",
        "Lines will wrap at `editor.wordWrapColumn`.",
        "Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`."
      ],
      "default": "off",
      "description": "Controls how lines should wrap. Can be:\n - 'off' (disable wrapping),\n - 'on' (viewport wrapping),\n - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or\n - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`)."
    },
    "editor.wordWrapColumn": {
      "type": "integer",
      "default": 80,
      "minimum": 1,
      "description": "Controls the wrapping column of the editor when `editor.wordWrap` is 'wordWrapColumn' or 'bounded'."
    },
    "editor.wrappingIndent": {
      "type": "string",
      "enum": [
        "none",
        "same",
        "indent"
      ],
      "default": "same",
      "description": "Controls the indentation of wrapped lines. Can be one of 'none', 'same' or 'indent'."
    },
    "editor.mouseWheelScrollSensitivity": {
      "type": "number",
      "default": 1,
      "description": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events"
    },
    "editor.multiCursorModifier": {
      "type": "string",
      "enum": [
        "ctrlCmd",
        "alt"
      ],
      "enumDescriptions": [
        "Maps to `Control` on Windows and Linux and to `Command` on OSX.",
        "Maps to `Alt` on Windows and Linux and to `Option` on OSX."
      ],
      "default": "alt",
      "description": "The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on OSX. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier."
    },
    "editor.quickSuggestions": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "properties": {
            "strings": {
              "type": "boolean",
              "default": false,
              "description": "Enable quick suggestions inside strings."
            },
            "comments": {
              "type": "boolean",
              "default": false,
              "description": "Enable quick suggestions inside comments."
            },
            "other": {
              "type": "boolean",
              "default": true,
              "description": "Enable quick suggestions outside of strings and comments."
            }
          }
        }
      ],
      "default": {
        "other": true,
        "comments": false,
        "strings": false
      },
      "description": "Controls if suggestions should automatically show up while typing"
    },
    "editor.quickSuggestionsDelay": {
      "type": "integer",
      "default": 10,
      "minimum": 0,
      "description": "Controls the delay in ms after which quick suggestions will show up"
    },
    "editor.parameterHints": {
      "type": "boolean",
      "default": true,
      "description": "Enables parameter hints"
    },
    "editor.autoClosingBrackets": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the editor should automatically close brackets after opening them"
    },
    "editor.formatOnType": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the editor should automatically format the line after typing"
    },
    "editor.formatOnPaste": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document."
    },
    "editor.suggestOnTriggerCharacters": {
      "type": "boolean",
      "default": true,
      "description": "Controls if suggestions should automatically show up when typing trigger characters"
    },
    "editor.acceptSuggestionOnEnter": {
      "type": "string",
      "enum": [
        "on",
        "smart",
        "off"
      ],
      "default": "on",
      "description": "Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change"
    },
    "editor.acceptSuggestionOnCommitCharacter": {
      "type": "boolean",
      "default": true,
      "description": "Controls if suggestions should be accepted on commit characters. For instance in JavaScript the semi-colon (';') can be a commit character that accepts a suggestion and types that character."
    },
    "editor.snippetSuggestions": {
      "type": "string",
      "enum": [
        "top",
        "bottom",
        "inline",
        "none"
      ],
      "default": "inline",
      "description": "Controls whether snippets are shown with other suggestions and how they are sorted."
    },
    "editor.emptySelectionClipboard": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether copying without a selection copies the current line."
    },
    "editor.wordBasedSuggestions": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether completions should be computed based on words in the document."
    },
    "editor.suggestFontSize": {
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "description": "Font size for the suggest widget"
    },
    "editor.suggestLineHeight": {
      "type": "integer",
      "default": 0,
      "minimum": 0,
      "description": "Line height for the suggest widget"
    },
    "editor.selectionHighlight": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the editor should highlight similar matches to the selection"
    },
    "editor.occurrencesHighlight": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the editor should highlight semantic symbol occurrences"
    },
    "editor.overviewRulerLanes": {
      "type": "integer",
      "default": 3,
      "description": "Controls the number of decorations that can show up at the same position in the overview ruler"
    },
    "editor.overviewRulerBorder": {
      "type": "boolean",
      "default": true,
      "description": "Controls if a border should be drawn around the overview ruler."
    },
    "editor.cursorBlinking": {
      "type": "string",
      "enum": [
        "blink",
        "smooth",
        "phase",
        "expand",
        "solid"
      ],
      "default": "blink",
      "description": "Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'"
    },
    "editor.mouseWheelZoom": {
      "type": "boolean",
      "default": false,
      "description": "Zoom the font of the editor when using mouse wheel and holding Ctrl"
    },
    "editor.cursorStyle": {
      "type": "string",
      "enum": [
        "block",
        "block-outline",
        "line",
        "line-thin",
        "underline",
        "underline-thin"
      ],
      "default": "line",
      "description": "Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'"
    },
    "editor.fontLigatures": {
      "type": "boolean",
      "default": false,
      "description": "Enables font ligatures"
    },
    "editor.hideCursorInOverviewRuler": {
      "type": "boolean",
      "default": false,
      "description": "Controls if the cursor should be hidden in the overview ruler."
    },
    "editor.renderWhitespace": {
      "type": "string",
      "enum": [
        "none",
        "boundary",
        "all"
      ],
      "default": "none",
      "description": "Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words."
    },
    "editor.renderControlCharacters": {
      "type": "boolean",
      "default": false,
      "description": "Controls whether the editor should render control characters"
    },
    "editor.renderIndentGuides": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the editor should render indent guides"
    },
    "editor.renderLineHighlight": {
      "type": "string",
      "enum": [
        "none",
        "gutter",
        "line",
        "all"
      ],
      "default": "line",
      "description": "Controls how the editor should render the current line highlight, possibilities are 'none', 'gutter', 'line', and 'all'."
    },
    "editor.codeLens": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the editor shows code lenses"
    },
    "editor.folding": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the editor has code folding enabled"
    },
    "editor.showFoldingControls": {
      "type": "string",
      "enum": [
        "always",
        "mouseover"
      ],
      "default": "mouseover",
      "description": "Controls whether the fold controls on the gutter are automatically hidden."
    },
    "editor.matchBrackets": {
      "type": "boolean",
      "default": true,
      "description": "Highlight matching brackets when one of them is selected."
    },
    "editor.glyphMargin": {
      "type": "boolean",
      "default": true,
      "description": "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging."
    },
    "editor.useTabStops": {
      "type": "boolean",
      "default": true,
      "description": "Inserting and deleting whitespace follows tab stops"
    },
    "editor.trimAutoWhitespace": {
      "type": "boolean",
      "default": true,
      "description": "Remove trailing auto inserted whitespace"
    },
    "editor.stablePeek": {
      "type": "boolean",
      "default": false,
      "description": "Keep peek editors open even when double clicking their content or when hitting Escape."
    },
    "editor.dragAndDrop": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the editor should allow to move selections via drag and drop."
    },
    "editor.accessibilitySupport": {
      "type": "string",
      "enum": [
        "auto",
        "on",
        "off"
      ],
      "enumDescriptions": [
        "The editor will use platform APIs to detect when a Screen Reader is attached.",
        "The editor will be permanently optimized for usage with a Screen Reader.",
        "The editor will never be optimized for usage with a Screen Reader."
      ],
      "default": "auto",
      "description": "Controls whether the editor should run in a mode where it is optimized for screen readers."
    },
    "diffEditor.renderSideBySide": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the diff editor shows the diff side by side or inline"
    },
    "diffEditor.ignoreTrimWhitespace": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the diff editor shows changes in leading or trailing whitespace as diffs"
    },
    "diffEditor.renderIndicators": {
      "type": "boolean",
      "default": true,
      "description": "Controls if the diff editor shows +/- indicators for added/removed changes"
    }
  }
}