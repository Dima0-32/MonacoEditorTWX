<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Entities>
	<Things>
		<Thing description="Helper thing used by the monaco script editor that contains some services used to get metadata from the platform. On an environment where security is imporntant, make sure that developers can view this thing and can execute it's non-generic services" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2019-01-23T12:13:18.818+02:00" name="MonacoEditorHelper" published="false" thingTemplate="GenericThing" valueStream="">
			<Owner name="Administrator" type="User"/>
			<ThingShape>
				<PropertyDefinitions/>
				<ServiceDefinitions>
					<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetAllDataShapes">
						<ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetMetadataOfEntities">
						<ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description="" name="entityType" ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
				</ServiceDefinitions>
				<EventDefinitions/>
				<ServiceMappings/>
				<ServiceImplementations>
					<ServiceImplementation description="" handlerName="Script" name="GetAllDataShapes">
						<ConfigurationTables>
							<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// get a list of datashapes
var datashapes = Resources["SearchFunctions"].SpotlightSearch({
	maxItems: 1000,
	types: {
		items: ["DataShape"]
	}
});

// create the infotable with the correct datashape
var result = Resources.InfoTableFunctions.CreateInfoTable();
result.AddField({
	baseType: 'DATASHAPENAME',
	name: 'name'
});
result.AddField({
	baseType: 'STRING',
	name: 'description'
});
result.AddField({
	baseType: 'INFOTABLE',
	name: 'fieldDefinitions',
});

for (var i = 0; i < datashapes.rows.length; i++) {
	var datashape = datashapes.rows[i];
	result.AddRow({
		name: datashape.name,
		description: datashape.description,
		fieldDefinitions: DataShapes[datashape.name].GetFieldDefinitions()
	});
}
]]>										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description="" handlerName="Script" name="GetMetadataOfEntities">
						<ConfigurationTables>
							<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// get a list of entities that match this entity type
var resources = Resources["SearchFunctions"].SpotlightSearch({
	maxItems: 1000,
	types: {
		items: [entityType]
	}
});

// create the infotable with the correct datashape
var result = Resources.InfoTableFunctions.CreateInfoTable();
result.AddField({
	baseType: 'STRING',
	name: 'name'
});
result.AddField({
	baseType: 'STRING',
	name: 'description'
});
result.AddField({
	baseType: 'JSON',
	name: 'metadata',
});

var collectionName = entityType + "s";

for (var i = 0; i < resources.rows.length; i++) {
	var resource = resources.rows[i];
	result.AddRow({
		name: resource.name,
		description: resource.description,
		metadata: this[collectionName][resource.name].GetInstanceMetadataAsJSON()
	})
};]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
				</ServiceImplementations>
				<Subscriptions/>
			</ThingShape>
		</Thing>
	</Things>
</Entities>