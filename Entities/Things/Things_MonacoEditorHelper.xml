<?xml version="1.0" encoding="UTF-8" standalone="no"?><Entities build="b14" majorVersion="7" minorVersion="1" modelPersistenceProviderPackage="H2PersistenceProviderPackage" revision="3" schemaVersion="911"><Things><Thing description="Helper  thing used by the monaco script editor.&#10;This contains some services used to get metadata from the platform.&#10;&#10;In a security environment, make sure that developers can view this thing and can execute it's non-generic services" documentationContent="&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#10;" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2017-03-03T10:59:07.396+02:00" name="MonacoEditorHelper" projectName="" published="false" tags="PTC:MonacoEditor" thingTemplate="GenericThing" valueStream=""><Owner name="Administrator" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions><Permissions resourceName="GetAllDataShapes"><PropertyRead/><PropertyWrite/><ServiceInvoke><Principal isPermitted="true" name="Users" type="Group"/></ServiceInvoke><EventInvoke/><EventSubscribe/></Permissions></RunTimePermissions><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTables/><ThingShape><PropertyDefinitions/><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetAllDataShapes"><ResultType aspect.dataShape="DatashapeDefinition" baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="GetAllDataShapes"><ConfigurationTables><ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[// get a list of datashapes
var datashapes = Resources["SearchFunctions"].SpotlightSearch({
	maxItems: 1000,
	types: {
		items: ["DataShape"]
	}
});

var result = DataShapes["DatashapeDefinition"].CreateValues();

for (var i = 0; i < datashapes.rows.length; i++) {
	var datashape = datashapes.rows[i];
	result.AddRow({
		name: datashape.name,
		description: datashape.description,
		fieldDefinitions: DataShapes[datashape.name].GetFieldDefinitions()
	})
};

]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges></ConfigurationChanges></Thing></Things></Entities>