import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.HttpMultipartMode
import org.apache.http.entity.mime.content.FileBody
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*
import com.eriwen.gradle.js.tasks.MinifyJsTask
import com.eriwen.gradle.js.tasks.CombineJsTask

buildscript {
   repositories {
     mavenCentral()
   }
   dependencies {
      classpath 'org.apache.httpcomponents:httpmime:4.5.2'
      classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
   }
}

plugins {
  id "com.eriwen.gradle.js" version "2.14.1"
}

// set the properties accordingly
project.ext {
    baseDir = projectDir
    uiDir = "${baseDir}/ui"
    libDir = "${baseDir}/lib"
    configDir = "${baseDir}/metadata.xml"
    entitiesDir = "${baseDir}/Entities"
    zipDir = "${baseDir}/zip"
    packageVendor = "ThingWorx Customer Service"
    thingworxServerRoot = "http://localhost:8016"
    thingworxUser = "Administrator"
    thingworxPass = "admin"
    skipJsFiles = []
}

task increaseVersionNumber() {
    def file = "${baseDir}/metadata.xml"
    def parser = new groovy.util.XmlParser(false,true);
    def xml = parser.parse(file)

    def currentVersion = xml.ExtensionPackages.ExtensionPackage.@packageVersion[0];

    def versionComponents = currentVersion.split('\\.');

    def minorVersion = ++Integer.parseInt(versionComponents[versionComponents.length - 1]);

    versionComponents[versionComponents.length - 1] = String.valueOf(minorVersion);
    
    version = String.join('.', versionComponents)
    xml.ExtensionPackages.ExtensionPackage.@packageVersion = version
    println 'Updated to version ' + project.version
    PrintWriter pw = new PrintWriter(new File(file))
    pw.write(groovy.xml.XmlUtil.serialize(xml))
    pw.close()
}

task copyUiFiles {
    doLast {
        copy {
            from uiDir
            into "${buildDir}/zip/ui/"
        }
        
        copy {
            from "${project.ext.configDir}"
            into "${buildDir}/zip/"
        }

        if (project.hasProperty('buildRelease')) { 
            // Combine the files into single minified scripts as follows:
            // - all runtime files are combined into a single runtime script
            // - all design time files are combined into a single design script
            // - all files used in both design and runtime are combined into a single script

            def XMLParser = new groovy.util.XmlParser(false, true);
            def metadata = XMLParser.parse("${buildDir}/zip/metadata.xml");

            def runtimeFiles = [];
            def designFiles = [];
            def commonFiles = [];

            def nodesToRemove = [];

            def widgetName = metadata.Widgets.Widget[0].@name;

            metadata.Widgets.Widget.UIResources.FileResource.each { fileResource ->
                // Skip CSS files
                if (fileResource.@type != "JS") return;
                // Skip entries with URL resources
                if (fileResource.@file == null) return;

                nodesToRemove << fileResource;

                def isDesign = fileResource.@isDevelopment == "true";
                def isRuntime = fileResource.@isDevelopment == "true";

                if (isDesign) {
                    if (isRuntime) {
                        commonFiles << "${buildDir}/zip/ui/${widgetName}/${fileResource.@file}";
                    }
                    else {
                        designFiles << "${buildDir}/zip/ui/${widgetName}/${fileResource.@file}";
                    }
                }
                else {
                    runtimeFiles << "${buildDir}/zip/ui/${widgetName}/${fileResource.@file}";
                }
            }

            // Delete the XML nodes of the files about to be combined
            nodesToRemove.each { node ->
                node.parent().remove(node);
            }

            // Combine the files
            task combineRuntime(type: CombineJsTask) {
                encoding = "UTF-8"
                source = runtimeFiles
                dest = file("${buildDir}/zip/ui/${widgetName}/${widgetName}.runtime.min.js")
            }
            task combineDesign(type: CombineJsTask) {
                encoding = "UTF-8"
                source = designFiles
                dest = file("${buildDir}/zip/ui/${widgetName}/${widgetName}.ide.min.js")
            }
            task combineCommon(type: CombineJsTask) {
                encoding = "UTF-8"
                source = commonFiles
                dest = file("${buildDir}/zip/ui/${widgetName}/${widgetName}.min.js")
            }

            if (runtimeFiles.size() > 0) {
                def runtimeFileNode = XMLParser.parseText("<FileResource type=\"JS\" file=\"${widgetName}.runtime.min.js\" description=\"\" isDevelopment=\"false\" isRuntime=\"true\"/>");
                metadata.Widgets.Widget.UIResources[0].append(runtimeFileNode);
                tasks.combineRuntime.execute();
            }
            if (designFiles.size() > 0) {
                def designFileNode = XMLParser.parseText("<FileResource type=\"JS\" file=\"${widgetName}.ide.min.js\" description=\"\" isDevelopment=\"true\" isRuntime=\"false\"/>");
                metadata.Widgets.Widget.UIResources[0].append(designFileNode);
                tasks.combineDesign.execute();
            }
            if (commonFiles.size() > 0) {
                def commonFileNode = XMLParser.parseText("<FileResource type=\"JS\" file=\"${widgetName}.min.js\" description=\"\" isDevelopment=\"true\" isRuntime=\"true\"/>");
                metadata.Widgets.Widget.UIResources[0].append(commonFileNode);
                tasks.combineCommon.execute();
            }

            // Delete the old files
            runtimeFiles.each { name ->
                file("${name}").delete();
            }
            designFiles.each { name ->
                file("${name}").delete();
            }
            commonFiles.each { name ->
                file("${name}").delete();
            }

            // Update metadata xml
            PrintWriter pw = new PrintWriter(new File("${buildDir}/zip/metadata.xml"))
            pw.write(groovy.xml.XmlUtil.serialize(metadata))
            pw.close()

            // Minify the files
            fileTree("${buildDir}/zip/ui/") {include '**/*.js' exclude project.ext.skipJsFiles } .eachWithIndex { jsFile, index ->
                def dynamicTask = "minify$index"
                task "$dynamicTask" (type: MinifyJsTask) {
                    source = jsFile
                    dest = jsFile
                    closure {
                        compilationLevel = 'SIMPLE_OPTIMIZATIONS'
                        warningLevel = 'QUIET'
                        compilerOptions = [
                            languageIn: 'ECMASCRIPT6',
                            languageOut: 'ECMASCRIPT5'
                        ]
                    }
                }
                tasks."$dynamicTask".execute()
            }
        }
    }
}

task prepPackage(dependsOn: ['increaseVersionNumber', 'copyUiFiles']) {
    delete project.ext.zipDir
    delete "${buildDir}/zip/"
    doLast {
        // add the entities 
        copy {
            from entitiesDir
            into "${buildDir}/zip/Entities/"
        }
    }
}

task packageExtension(type: Zip, dependsOn: prepPackage, overwrite: true) {
    version = project.version
    baseName = project.name
    extension = "zip"
    appendix = project.hasProperty('buildRelease') ? "min" : "dev"
    destinationDir = new File(project.ext.zipDir)
    from "${buildDir}/zip/"
}

task upload(dependsOn: packageExtension) {
  doLast{
    def http = new HTTPBuilder("${thingworxServerRoot}/Thingworx/")
    def basicAuth = "${thingworxUser}:${thingworxPass}".bytes.encodeBase64().toString()
    http.setHeaders ([Authorization: "Basic ${basicAuth}"])

    def extZip = file("${baseDir}/zip/${project.name}-${project.hasProperty('buildRelease') ? "min": "dev" }-${version}.zip")

    http.request(POST) { req ->
        uri.path = 'ExtensionPackageUploader'
        uri.query = ['purpose': 'import']
        headers."X-XSRF-TOKEN" = "TWX-XSRF-TOKEN-VALUE"
        requestContentType = 'multipart/form-data'
        MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE)
        entity.addPart('file', new FileBody(extZip))
        req.setEntity(entity)
        response.success = {resp ->
            println("Upload successful!")
        }

        response.failure = {resp ->
            println(resp.statusLine)
            throw new StopExecutionException("Thingworx upload failed! See server response above")
        }
    }
  }
}
