{
  "$schema": "http://json-schema.org/draft-07/schema",
  "type": "object",
  "title": "Schema for ThingWorx Monaco Editor",
  "description": "The schema for configuring the ThingWorx Monaco Editor.",
  "properties": {
    "thingworx": {
      "$id": "#/properties/thingworx",
      "type": "object",
      "title": "The thingworx schema",
      "description": "An explanation about the purpose of this instance.",
      "default": {},
      "examples": [
        {
          "showGenericServices": true
        }
      ],
      "required": [
        "showGenericServices"
      ],
      "properties": {
        "showGenericServices": {
          "$id": "#/properties/thingworx/properties/showGenericServices",
          "type": "boolean",
          "title": "The showGenericServices schema",
          "description": "An explanation about the purpose of this instance.",
          "default": false,
          "examples": [
            true
          ]
        }
      },
      "additionalProperties": true
    },
    "editor": {
      "$id": "#/properties/editor",
      "type": "object",
      "title": "The editor schema",
      "description": "Configure the moanco editor to your liking.",
      "properties": {
        "fontFamily": {
          "type": "string",
          "default": "Consolas, 'Courier New', monospace",
          "description": "Controls the font family."
        },
        "fontWeight": {
          "type": "string",
          "enum": [
            "normal",
            "bold",
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900"
          ],
          "default": "normal",
          "description": "Controls the font weight."
        },
        "theme": {
          "type": "string",
          "enum": [
            "vs",
            "vs-dark",
            "hc-black"
          ],
          "default": "vs",
          "description": "Controls the theme of the editor."
        },
        "fontSize": {
          "type": "number",
          "default": 14,
          "description": "Controls the font size in pixels."
        },
        "lineHeight": {
          "type": "number",
          "default": 0,
          "description": "Controls the line height. Use 0 to compute the line height from the font size."
        },
        "bracketPairColorization.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether bracket pair colorization is enabled or not. Editor must be reloaded for the change to apply."
        },
        "letterSpacing": {
          "type": "number",
          "default": 0,
          "description": "Controls the letter spacing in pixels."
        },
        "lineNumbers": {
          "type": "string",
          "enum": [
            "off",
            "on",
            "relative",
            "interval"
          ],
          "enumDescriptions": [
            "Line numbers are not rendered.",
            "Line numbers are rendered as absolute number.",
            "Line numbers are rendered as distance in lines to cursor position.",
            "Line numbers are rendered every 10 lines."
          ],
          "default": "on",
          "description": "Controls the display of line numbers."
        },
        "renderFinalNewline": {
          "type": "boolean",
          "default": true,
          "description": "Render last line number when the file ends with a newline."
        },
        "rulers": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "default": [],
          "description": "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty."
        },
        "wordSeparators": {
          "type": "string",
          "default": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
          "description": "Characters that will be used as word separators when doing word related navigations or operations."
        },
        "tabSize": {
          "type": "number",
          "default": 4,
          "minimum": 1,
          "markdownDescription": "The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on."
        },
        "insertSpaces": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on."
        },
        "detectIndentation": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents."
        },
        "roundedSelection": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether selections should have rounded corners."
        },
        "scrollBeyondLastLine": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor will scroll beyond the last line."
        },
        "scrollBeyondLastColumn": {
          "type": "number",
          "default": 5,
          "description": "Controls the number of extra characters beyond which the editor will scroll horizontally."
        },
        "smoothScrolling": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether the editor will scroll using an animation."
        },
        "minimap": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Controls whether the minimap is shown."
            },
            "side": {
              "type": "string",
              "enum": [
                "left",
                "right"
              ],
              "default": "right",
              "description": "Controls the side where to render the minimap."
            },
            "showSlider": {
              "type": "string",
              "enum": [
                "always",
                "mouseover"
              ],
              "default": "mouseover",
              "description": "Controls whether the minimap slider is automatically hidden."
            },
            "renderCharacters": {
              "type": "boolean",
              "default": true,
              "description": "Render the actual characters on a line as opposed to color blocks."
            },
            "maxColumn": {
              "type": "number",
              "default": 120,
              "description": "Limit the width of the minimap to render at most a certain number of columns."
            }
          }
        },
        "hover": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Controls whether the hover is shown."
            },
            "delay": {
              "type": "number",
              "default": 300,
              "description": "Controls the delay in milliseconds after which the hover is shown."
            },
            "sticky": {
              "type": "boolean",
              "default": true,
              "description": "Controls whether the hover should remain visible when mouse is moved over it."
            }
          }
        },
        "find": {
          "type": "object",
          "properties": {
            "seedSearchStringFromSelection": {
              "type": "boolean",
              "default": true,
              "description": "Controls whether the search string in the Find Widget is seeded from the editor selection."
            },
            "autoFindInSelection": {
              "type": "boolean",
              "default": false,
              "description": "Controls whether the find operation is carried out on selected text or the entire file in the editor."
            },
            "globalFindClipboard": {
              "type": "boolean",
              "default": false,
              "description": "Controls whether the Find Widget should read or modify the shared find clipboard on macOS.",
              "included": false
            },
            "addExtraSpaceOnTop": {
              "type": "boolean",
              "default": true,
              "description": "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible."
            }
          }
        },
        "wordWrap": {
          "type": "string",
          "enum": [
            "off",
            "on",
            "wordWrapColumn",
            "bounded"
          ],
          "markdownEnumDescriptions": [
            "Lines will never wrap.",
            "Lines will wrap at the viewport width.",
            "Lines will wrap at `#editor.wordWrapColumn#`.",
            "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."
          ],
          "default": "off",
          "description": "Controls how lines should wrap."
        },
        "wordWrapColumn": {
          "type": "integer",
          "default": 80,
          "minimum": 1,
          "markdownDescription": "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`."
        },
        "wrappingIndent": {
          "type": "string",
          "enum": [
            "none",
            "same",
            "indent",
            "deepIndent"
          ],
          "enumDescriptions": [
            "No indentation. Wrapped lines begin at column 1.",
            "Wrapped lines get the same indentation as the parent.",
            "Wrapped lines get +1 indentation toward the parent.",
            "Wrapped lines get +2 indentation toward the parent."
          ],
          "default": "same",
          "description": "Controls the indentation of wrapped lines."
        },
        "mouseWheelScrollSensitivity": {
          "type": "number",
          "default": 1,
          "markdownDescription": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events."
        },
        "fastScrollSensitivity": {
          "type": "number",
          "default": 5,
          "markdownDescription": "Scrolling speed mulitiplier when pressing `Alt`."
        },
        "multiCursorModifier": {
          "type": "string",
          "enum": [
            "ctrlCmd",
            "alt"
          ],
          "markdownEnumDescriptions": [
            "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
            "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
          ],
          "default": "alt",
          "markdownDescription": "The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)."
        },
        "multiCursorMergeOverlapping": {
          "type": "boolean",
          "default": true,
          "description": "Merge multiple cursors when they are overlapping."
        },
        "quickSuggestions": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "properties": {
                "strings": {
                  "type": "boolean",
                  "default": false,
                  "description": "Enable quick suggestions inside strings."
                },
                "comments": {
                  "type": "boolean",
                  "default": false,
                  "description": "Enable quick suggestions inside comments."
                },
                "other": {
                  "type": "boolean",
                  "default": true,
                  "description": "Enable quick suggestions outside of strings and comments."
                }
              }
            }
          ],
          "default": {
            "other": true,
            "comments": false,
            "strings": false
          },
          "description": "Controls whether suggestions should automatically show up while typing."
        },
        "quickSuggestionsDelay": {
          "type": "integer",
          "default": 10,
          "minimum": 0,
          "description": "Controls the delay in milliseconds after which quick suggestions will show up."
        },
        "parameterHints": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Enables a pop-up that shows parameter documentation and type information as you type."
            },
            "cycle": {
              "type": "boolean",
              "default": false,
              "description": "Controls whether the parameter hints menu cycles or closes when reaching the end of the list."
            }
          }
        },
        "autoClosingBrackets": {
          "type": "string",
          "enum": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never"
          ],
          "enumDescriptions": [
            "",
            "Use language configurations to determine when to autoclose brackets.",
            "Autoclose brackets only when the cursor is to the left of whitespace.",
            ""
          ],
          "default": "languageDefined",
          "description": "Controls whether the editor should automatically close brackets after the user adds an opening bracket."
        },
        "autoClosingQuotes": {
          "type": "string",
          "enum": [
            "always",
            "languageDefined",
            "beforeWhitespace",
            "never"
          ],
          "enumDescriptions": [
            "",
            "Use language configurations to determine when to autoclose quotes.",
            "Autoclose quotes only when the cursor is to the left of whitespace.",
            ""
          ],
          "default": "languageDefined",
          "description": "Controls whether the editor should automatically close quotes after the user adds an opening quote."
        },
        "autoSurround": {
          "type": "string",
          "enum": [
            "languageDefined",
            "brackets",
            "quotes",
            "never"
          ],
          "enumDescriptions": [
            "Use language configurations to determine when to automatically surround selections.",
            "Surround with brackets but not quotes.",
            "Surround with quotes but not brackets.",
            ""
          ],
          "default": "languageDefined",
          "description": "Controls whether the editor should automatically surround selections."
        },
        "formatOnType": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether the editor should automatically format the line after typing."
        },
        "formatOnPaste": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document."
        },
        "autoIndent": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should automatically adjust the indentation when users type, paste or move lines. Extensions with indentation rules of the language must be available."
        },
        "suggestOnTriggerCharacters": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether suggestions should automatically show up when typing trigger characters."
        },
        "acceptSuggestionOnEnter": {
          "type": "string",
          "enum": [
            "on",
            "smart",
            "off"
          ],
          "default": "on",
          "markdownEnumDescriptions": [
            "",
            "Only accept a suggestion with `Enter` when it makes a textual change.",
            ""
          ],
          "markdownDescription": "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions."
        },
        "acceptSuggestionOnCommitCharacter": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character."
        },
        "snippetSuggestions": {
          "type": "string",
          "enum": [
            "top",
            "bottom",
            "inline",
            "none"
          ],
          "enumDescriptions": [
            "Show snippet suggestions on top of other suggestions.",
            "Show snippet suggestions below other suggestions.",
            "Show snippets suggestions with other suggestions.",
            "Do not show snippet suggestions."
          ],
          "default": "inline",
          "description": "Controls whether snippets are shown with other suggestions and how they are sorted."
        },
        "emptySelectionClipboard": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether copying without a selection copies the current line."
        },
        "copyWithSyntaxHighlighting": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether syntax highlighting should be copied into the clipboard."
        },
        "wordBasedSuggestions": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether completions should be computed based on words in the document."
        },
        "suggestSelection": {
          "type": "string",
          "enum": [
            "first",
            "recentlyUsed",
            "recentlyUsedByPrefix"
          ],
          "markdownEnumDescriptions": [
            "Always select the first suggestion.",
            "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.",
            "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
          ],
          "default": "recentlyUsed",
          "description": "Controls how suggestions are pre-selected when showing the suggest list."
        },
        "suggestFontSize": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "markdownDescription": "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used."
        },
        "suggestLineHeight": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "markdownDescription": "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used."
        },
        "tabCompletion": {
          "type": "string",
          "default": "off",
          "enum": [
            "on",
            "off",
            "onlySnippets"
          ],
          "enumDescriptions": [
            "Tab complete will insert the best matching suggestion when pressing tab.",
            "Disable tab completions.",
            "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
          ],
          "description": "Enables tab completions."
        },
        "suggest": {
          "type": "object",
          "properties": {
            "filterGraceful": {
              "type": "boolean",
              "default": true,
              "description": "Controls whether filtering and sorting suggestions accounts for small typos."
            },
            "localityBonus": {
              "type": "boolean",
              "default": false,
              "description": "Controls whether sorting favours words that appear close to the cursor."
            },
            "shareSuggestSelections": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`)."
            },
            "snippetsPreventQuickSuggestions": {
              "type": "boolean",
              "default": true,
              "description": "Control whether an active snippet prevents quick suggestions."
            }
          }
        },
        "selectionHighlight": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should highlight matches similar to the selection."
        },
        "occurrencesHighlight": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should highlight semantic symbol occurrences."
        },
        "overviewRulerLanes": {
          "type": "integer",
          "default": 3,
          "description": "Controls the number of decorations that can show up at the same position in the overview ruler."
        },
        "overviewRulerBorder": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether a border should be drawn around the overview ruler."
        },
        "cursorBlinking": {
          "type": "string",
          "enum": [
            "blink",
            "smooth",
            "phase",
            "expand",
            "solid"
          ],
          "default": "blink",
          "description": "Control the cursor animation style."
        },
        "mouseWheelZoom": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Zoom the font of the editor when using mouse wheel and holding `Ctrl`."
        },
        "cursorSmoothCaretAnimation": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether the smooth caret animation should be enabled."
        },
        "cursorStyle": {
          "type": "string",
          "enum": [
            "block",
            "block-outline",
            "line",
            "line-thin",
            "underline",
            "underline-thin"
          ],
          "default": "line",
          "description": "Controls the cursor style."
        },
        "cursorWidth": {
          "type": "integer",
          "default": 0,
          "markdownDescription": "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`."
        },
        "fontLigatures": {
          "type": "boolean",
          "default": false,
          "description": "Enables/Disables font ligatures."
        },
        "hideCursorInOverviewRuler": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether the cursor should be hidden in the overview ruler."
        },
        "renderWhitespace": {
          "type": "string",
          "enum": [
            "none",
            "boundary",
            "all"
          ],
          "enumDescriptions": [
            "",
            "Render whitespace characters except for single spaces between words.",
            ""
          ],
          "default": "none",
          "description": "Controls how the editor should render whitespace characters."
        },
        "renderControlCharacters": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether the editor should render control characters."
        },
        "renderIndentGuides": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should render indent guides."
        },
        "highlightActiveIndentGuide": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should highlight the active indent guide."
        },
        "renderLineHighlight": {
          "type": "string",
          "enum": [
            "none",
            "gutter",
            "line",
            "all"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "Highlights both the gutter and the current line."
          ],
          "default": "line",
          "description": "Controls how the editor should render the current line highlight."
        },
        "codeLens": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor shows CodeLens."
        },
        "folding": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor has code folding enabled."
        },
        "foldingStrategy": {
          "type": "string",
          "enum": [
            "auto",
            "indentation"
          ],
          "default": "auto",
          "markdownDescription": "Controls the strategy for computing folding ranges. `auto` uses a language specific folding strategy, if available. `indentation` uses the indentation based folding strategy."
        },
        "showFoldingControls": {
          "type": "string",
          "enum": [
            "always",
            "mouseover"
          ],
          "default": "mouseover",
          "description": "Controls whether the fold controls on the gutter are automatically hidden."
        },
        "matchBrackets": {
          "type": "boolean",
          "default": true,
          "description": "Highlight matching brackets when one of them is selected."
        },
        "glyphMargin": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging."
        },
        "useTabStops": {
          "type": "boolean",
          "default": true,
          "description": "Inserting and deleting whitespace follows tab stops."
        },
        "trimAutoWhitespace": {
          "type": "boolean",
          "default": true,
          "description": "Remove trailing auto inserted whitespace."
        },
        "stablePeek": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Keep peek editors open even when double clicking their content or when hitting `Escape`."
        },
        "dragAndDrop": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should allow moving selections via drag and drop."
        },
        "accessibilitySupport": {
          "type": "string",
          "enum": [
            "auto",
            "on",
            "off"
          ],
          "enumDescriptions": [
            "The editor will use platform APIs to detect when a Screen Reader is attached.",
            "The editor will be permanently optimized for usage with a Screen Reader.",
            "The editor will never be optimized for usage with a Screen Reader."
          ],
          "default": "auto",
          "description": "Controls whether the editor should run in a mode where it is optimized for screen readers."
        },
        "showUnused": {
          "type": "boolean",
          "default": true,
          "description": "Controls fading out of unused code."
        },
        "links": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should detect links and make them clickable."
        },
        "colorDecorators": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the editor should render the inline color decorators and color picker."
        },
        "lightbulb": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Enables the code action lightbulb in the editor."
            }
          }
        },
        "maxTokenizationLineLength": {
          "type": "integer",
          "default": 20000,
          "description": "Lines above this length will not be tokenized for performance reasons"
        },
        "codeActionsOnSave": {
          "type": "object",
          "properties": {
            "source.organizeImports": {
              "type": "boolean",
              "description": "Controls whether organize imports action should be run on file save."
            },
            "source.fixAll": {
              "type": "boolean",
              "description": "Controls whether auto fix action should be run on file save."
            }
          },
          "additionalProperties": {
            "type": "boolean"
          },
          "default": {},
          "description": "Code action kinds to be run on save."
        },
        "codeActionsOnSaveTimeout": {
          "type": "number",
          "default": 750,
          "description": "Timeout in milliseconds after which the code actions that are run on save are cancelled."
        },
        "selectionClipboard": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the Linux primary clipboard should be supported.",
          "included": false
        },
        "largeFileOptimizations": {
          "type": "boolean",
          "default": true,
          "description": "Special handling for large files to disable certain memory intensive features."
        },
        "inlayHints": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Enables the inlay hints in the editor."
            },
            "fontSize": {
              "type": "number",
              "default": 14,
              "description": "Controls font size of inlay hints in the editor. A 'default' of 90% of `#editor.fontSize#` is used when the configured value is less than `5` or greater than the editor font size."
            },
            "fontFamily": {
              "type": "string",
              "default": "Consolas, 'Courier New', monospace",
              "description": "Controls font family of inlay hints in the editor. When set to empty, the `#editor.fontFamily#` is used."
            }
          }
        },
        "automaticLayout": {
          "type": "boolean",
          "default": true,
          "description": "Must be enabled. The editor will install an interval to check if its container dom node size has changed."
        }
      },
      "additionalProperties": true
    },
    "diffEditor": {
      "$id": "#/properties/diffEditor",
      "type": "object",
      "title": "The diffEditor schema",
      "description": "Settings that apply to the diff editor",
      "required": [],
      "properties": {
        "renderSideBySide": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the diff editor shows the diff side by side or inline."
        },
        "ignoreTrimWhitespace": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the diff editor shows changes in leading or trailing whitespace as diffs."
        },
        "renderIndicators": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether the diff editor shows +/- indicators for added/removed changes."
        }
      },
      "additionalProperties": true
    },
    "prettier": {
      "$id": "#/properties/prettier",
      "type": "object",
      "title": "The prettier schema",
      "required": [
        "enabled",
        "options"
      ],
      "properties": {
        "enabled": {
          "$id": "#/properties/prettier/properties/enabled",
          "type": "boolean",
          "title": "If prettier should be enabled to format code, or the default formatter should be used",
          "default": false,
          "examples": [
            true
          ]
        },
        "options": {
          "$id": "#/properties/prettier/properties/options",
          "type": "object",
          "title": "Settings of the prettier configuration",
          "description": "Refer to the prettier website for documentation.",
          "properties": {
            "arrowParens": {
              "description": "Include parentheses around a sole arrow function parameter.",
              "default": "always",
              "oneOf": [
                {
                  "enum": [
                    "always"
                  ],
                  "description": "Always include parens. Example: `(x) => x`"
                },
                {
                  "enum": [
                    "avoid"
                  ],
                  "description": "Omit parens when possible. Example: `x => x`"
                }
              ]
            },
            "bracketSameLine": {
              "description": "Put > of opening tags on the last line instead of on a new line.",
              "default": false,
              "type": "boolean"
            },
            "bracketSpacing": {
              "description": "Print spaces between brackets.",
              "default": true,
              "type": "boolean"
            },
            "cursorOffset": {
              "description": "Print (to stderr) where a cursor at the given position would move to after formatting.\nThis option cannot be used with --range-start and --range-end.",
              "default": -1,
              "type": "integer"
            },
            "embeddedLanguageFormatting": {
              "description": "Control how Prettier formats quoted code embedded in the file.",
              "default": "auto",
              "oneOf": [
                {
                  "enum": [
                    "auto"
                  ],
                  "description": "Format embedded code if Prettier can automatically identify it."
                },
                {
                  "enum": [
                    "off"
                  ],
                  "description": "Never automatically format embedded code."
                }
              ]
            },
            "endOfLine": {
              "description": "Which end of line characters to apply.",
              "default": "lf",
              "oneOf": [
                {
                  "enum": [
                    "lf"
                  ],
                  "description": "Line Feed only (\\n), common on Linux and macOS as well as inside git repos"
                },
                {
                  "enum": [
                    "crlf"
                  ],
                  "description": "Carriage Return + Line Feed characters (\\r\\n), common on Windows"
                },
                {
                  "enum": [
                    "cr"
                  ],
                  "description": "Carriage Return character only (\\r), used very rarely"
                },
                {
                  "enum": [
                    "auto"
                  ],
                  "description": "Maintain existing\n(mixed values within one file are normalised by looking at what's used after the first line)"
                }
              ]
            },
            "filepath": {
              "description": "Specify the input filepath. This will be used to do parser inference.",
              "type": "string"
            },
            "htmlWhitespaceSensitivity": {
              "description": "How to handle whitespaces in HTML.",
              "default": "css",
              "oneOf": [
                {
                  "enum": [
                    "css"
                  ],
                  "description": "Respect the default value of CSS display property."
                },
                {
                  "enum": [
                    "strict"
                  ],
                  "description": "Whitespaces are considered sensitive."
                },
                {
                  "enum": [
                    "ignore"
                  ],
                  "description": "Whitespaces are considered insensitive."
                }
              ]
            },
            "insertPragma": {
              "description": "Insert @format pragma into file's first docblock comment.",
              "default": false,
              "type": "boolean"
            },
            "jsxSingleQuote": {
              "description": "Use single quotes in JSX.",
              "default": false,
              "type": "boolean"
            },
            "parser": {
              "description": "Which parser to use.",
              "anyOf": [
                {
                  "enum": [
                    "flow"
                  ],
                  "description": "Flow"
                },
                {
                  "enum": [
                    "babel"
                  ],
                  "description": "JavaScript"
                },
                {
                  "enum": [
                    "babel-flow"
                  ],
                  "description": "Flow"
                },
                {
                  "enum": [
                    "babel-ts"
                  ],
                  "description": "TypeScript"
                },
                {
                  "enum": [
                    "typescript"
                  ],
                  "description": "TypeScript"
                },
                {
                  "enum": [
                    "espree"
                  ],
                  "description": "JavaScript"
                },
                {
                  "enum": [
                    "meriyah"
                  ],
                  "description": "JavaScript"
                },
                {
                  "enum": [
                    "css"
                  ],
                  "description": "CSS"
                },
                {
                  "enum": [
                    "less"
                  ],
                  "description": "Less"
                },
                {
                  "enum": [
                    "scss"
                  ],
                  "description": "SCSS"
                },
                {
                  "enum": [
                    "json"
                  ],
                  "description": "JSON"
                },
                {
                  "enum": [
                    "json5"
                  ],
                  "description": "JSON5"
                },
                {
                  "enum": [
                    "json-stringify"
                  ],
                  "description": "JSON.stringify"
                },
                {
                  "enum": [
                    "graphql"
                  ],
                  "description": "GraphQL"
                },
                {
                  "enum": [
                    "markdown"
                  ],
                  "description": "Markdown"
                },
                {
                  "enum": [
                    "mdx"
                  ],
                  "description": "MDX"
                },
                {
                  "enum": [
                    "vue"
                  ],
                  "description": "Vue"
                },
                {
                  "enum": [
                    "yaml"
                  ],
                  "description": "YAML"
                },
                {
                  "enum": [
                    "glimmer"
                  ],
                  "description": "Ember / Handlebars"
                },
                {
                  "enum": [
                    "html"
                  ],
                  "description": "HTML"
                },
                {
                  "enum": [
                    "angular"
                  ],
                  "description": "Angular"
                },
                {
                  "enum": [
                    "lwc"
                  ],
                  "description": "Lightning Web Components"
                },
                {
                  "type": "string",
                  "description": "Custom parser"
                }
              ]
            },
            "printWidth": {
              "description": "The line length where Prettier will try wrap.",
              "default": 80,
              "type": "integer"
            },
            "proseWrap": {
              "description": "How to wrap prose.",
              "default": "preserve",
              "oneOf": [
                {
                  "enum": [
                    "always"
                  ],
                  "description": "Wrap prose if it exceeds the print width."
                },
                {
                  "enum": [
                    "never"
                  ],
                  "description": "Do not wrap prose."
                },
                {
                  "enum": [
                    "preserve"
                  ],
                  "description": "Wrap prose as-is."
                }
              ]
            },
            "quoteProps": {
              "description": "Change when properties in objects are quoted.",
              "default": "as-needed",
              "oneOf": [
                {
                  "enum": [
                    "as-needed"
                  ],
                  "description": "Only add quotes around object properties where required."
                },
                {
                  "enum": [
                    "consistent"
                  ],
                  "description": "If at least one property in an object requires quotes, quote all properties."
                },
                {
                  "enum": [
                    "preserve"
                  ],
                  "description": "Respect the input use of quotes in object properties."
                }
              ]
            },
            "rangeEnd": {
              "description": "Format code ending at a given character offset (exclusive).\nThe range will extend forwards to the end of the selected statement.\nThis option cannot be used with --cursor-offset.",
              "default": null,
              "type": "integer"
            },
            "rangeStart": {
              "description": "Format code starting at a given character offset.\nThe range will extend backwards to the start of the first line containing the selected statement.\nThis option cannot be used with --cursor-offset.",
              "default": 0,
              "type": "integer"
            },
            "requirePragma": {
              "description": "Require either '@prettier' or '@format' to be present in the file's first docblock comment\nin order for it to be formatted.",
              "default": false,
              "type": "boolean"
            },
            "semi": {
              "description": "Print semicolons.",
              "default": true,
              "type": "boolean"
            },
            "singleQuote": {
              "description": "Use single quotes instead of double quotes.",
              "default": false,
              "type": "boolean"
            },
            "tabWidth": {
              "description": "Number of spaces per indentation level.",
              "default": 2,
              "type": "integer"
            },
            "trailingComma": {
              "description": "Print trailing commas wherever possible when multi-line.",
              "default": "es5",
              "oneOf": [
                {
                  "enum": [
                    "es5"
                  ],
                  "description": "Trailing commas where valid in ES5 (objects, arrays, etc.)"
                },
                {
                  "enum": [
                    "none"
                  ],
                  "description": "No trailing commas."
                },
                {
                  "enum": [
                    "all"
                  ],
                  "description": "Trailing commas wherever possible (including function arguments)."
                }
              ]
            },
            "useTabs": {
              "description": "Indent with tabs instead of spaces.",
              "default": false,
              "type": "boolean"
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": false
}